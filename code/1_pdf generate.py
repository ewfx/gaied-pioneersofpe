import os
from datetime import datetime
from typing import List, Tuple
from reportlab.lib.pagesizes import letter
try:
    from reportlab.pdfgen import canvas
    from reportlab.platypus import Paragraph
    from reportlab.lib.styles import getSampleStyleSheet
except ImportError:
    print("Error: reportlab is not installed. Please install it using: pip install reportlab")
    #  Set a flag to indicate that reportlab is not available
    reportlab_available = False
else:
    reportlab_available = True
from transformers import pipeline
import logging
import random

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# Load the summarization pipeline
try:
    summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
except Exception as e:
    logger.error(f"Error loading summarization pipeline: {e}")
    raise


def create_pdf(
    file_path: str,
    title: str,
    body_text: str,
    email_count: int,
) -> None:
    """
    Creates a PDF document with a title and body text. The body text is generated by an LLM
    for more realistic content.

    Args:
        file_path (str): The path to save the PDF file.
        title (str): The title of the PDF document.
        body_text (str): The body text of the PDF document. Now generated by LLM
        email_count (int): Counter for email.
    """
    if not reportlab_available:
        logger.error(f"Reportlab is not available, cannot create PDF {file_path}")
        return

    try:
        c = canvas.Canvas(file_path, pagesize=letter)
        c.setFont("Helvetica-Bold", 16)
        c.drawString(72, 750, title)
        c.setFont("Helvetica", 12)
        styles = getSampleStyleSheet()
        p = Paragraph(body_text, styles['Normal'])  # Use a Paragraph for formatted text
        p.wrapOn(c, 500, 600)  # Wrap the text within a specified width and height
        p.drawOn(c, 72, 600)  # Draw the paragraph on the canvas

        c.save()
        logger.info(f"PDF {file_path} created successfully.")
    except Exception as e:
        msg = f"Error saving PDF: {e}"
        logger.error(msg)
        raise



def generate_realistic_pdf_content(email_count: int) -> str:
    """
    Generates more realistic PDF content using a language model.

    Args:
        email_count (int): The email counter.

    Returns:
        str:  The body text for the PDF.
    """
    # Define lists of dynamic data
    banks = ["Citigroup", "JPMorgan Chase", "Bank of America", "Wells Fargo", "Goldman Sachs"]
    loan_types = ["Term Loan", " revolving Credit Facility", "Bridge Loan", "Syndicated Loan"]
    purposes = ["Acquisition Financing", "Debt Refinancing", "Project Finance", "Working Capital"]

    # Generate dynamic values
    transaction_date = datetime.now().strftime("%Y-%m-%d")
    amount = round(random.uniform(1000000, 100000000), 2)  # Random amount between 1M and 100M
    sending_bank = random.choice(banks)
    receiving_bank = random.choice(banks)
    while receiving_bank == sending_bank:
        receiving_bank = random.choice(banks)  # Ensure sender and receiver are different
    loan_type = random.choice(loan_types)
    purpose = random.choice(purposes)

    prompt = f"""
    Generate realistic content for a PDF document detailing a loan servicing transaction
    between two banks.
    The PDF should have a professional tone with clear sections.
    Include the following details:
    - Transaction Date: {transaction_date}
    - Amount: ${amount:,.2f}
    - Sending Bank: {sending_bank}
    - Receiving Bank: {receiving_bank}
    - Loan Type: {loan_type}
    - Purpose: {purpose}
    - Unique Request ID: {email_count}

    Do not include salutations or closings. Do not include a subject or title.
    """

    try:
        generated_text = summarizer(prompt, max_length=800, min_length=100, do_sample=True)[0][
            "summary_text"
        ]
    except Exception as e:
        msg = f"Error generating PDF content: {e}"
        logger.error(msg)
        generated_text = f"Error generating PDF content. Default text. Request ID: {email_count}"
    return generated_text



def create_sample_pdfs():
    """
    Creates multiple sample PDF files with content related to loan servicing transactions.
    """
    # Create a directory to store the PDFs if it doesn't exist
    if not os.path.exists("pdfs"):
        os.makedirs("pdfs")
    os.chdir("pdfs")

    for i in range(5):  # Create 5 sample PDF files
        title = f"Loan Servicing Transaction - Request {i + 1}"
        body_text = generate_realistic_pdf_content(i + 1)
        pdf_file_path = f"transaction_{i + 1}.pdf"
        create_pdf(pdf_file_path, title, body_text, i)
        print(f"PDF {i + 1} created: {pdf_file_path}")
    os.chdir("..") # change back to the main directory.
    print("Sample PDFs created successfully in the 'pdfs' directory.")



if __name__ == "__main__":
    create_sample_pdfs()

